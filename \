<script setup>
import { onMounted, ref } from 'vue'
import { useStore } from 'vuex'
import {
  arrowSolidUp,
  arrowSolidDown,
  arrowRight,
  imageAdd,
  textAdd,
  disket,
} from '../../utils/svg-vars'
import * as tinyMceCustomIcon from '../../utils/tinyMceCustomIcon'
import { articleSchema } from '../../utils/validation/article.schema'
import ArticleAddPreviewList from './ArticleAddPreviewList.vue'
import Editor from '@tinymce/tinymce-vue'
import CustomIcon from '../../components/CustomIcon.vue'
import CustomInput from '../../components/form/CustomInput.vue'
import CustomModalOverlay from '../../components/CustomModalOverlay.vue'
import AddNewImage from '../../components/modal/Article/AddNewImage.vue'
import ContentHead from '../../components/Content/ContentHead.vue'

const props = defineProps({
  parentItem: String,
  childItem: String,
})
const store = useStore()
const article = ref({
  title: '',
  item: [],
})

const errorState = ref({
  title: {
    isError: true,
    message: '',
  },
})
const modal = ref({
  chooseItem: false,
  textEditor: false,
  imageEditor: false,
})
const tinyMceOptions = ref({
  apiKey: 'emcqski0nlymetzrqpc6wq5pg0klreddh5chpfs8qipwf9jk',
  init: {
    menubar: false,
    toolbar:
      'undo redo | blocks | bold italic |  bullist numlist | customSave',
    plugins: 'save lists',
    save_onsavecallback: () => {
      pushTextArticle()
    },
    setup: (editor) => {
      editor.ui.registry.addIcon(
        'customSaveIcon',
        tinyMceCustomIcon.save('18')
      )
      editor.ui.registry.addButton('customSave', {
        icon: 'customSaveIcon',
        onAction: function (_) {
          pushTextArticle()
        },
      })
    },
  },
  contentValue: '',
})
onMounted(() => {
  store.commit('sidebar/setAllToNormal')
  store.commit('sidebar/setActiveParent', props.parentItem)
  store.commit('sidebar/setActiveChild', {
    parent: props.parentItem,
    itemToActive: props.childItem,
  })
})

function toggleModal(modalName) {
  modal.value[modalName] = !modal.value[modalName]
}

function pushTextArticle() {
  if (tinyMceOptions.value.contentValue.length != 0) {
    article.value.item.push({
      type: 'text',
      value: tinyMceOptions.value.contentValue,
    })
    tinyMceOptions.value.contentValue = ''
    toggleModal('textEditor')
    console.log(article.value.item)
  }
}

function pushImageArticle(imageValue) {
  article.value.item.push({
    type: 'image',
    value: {
      ...imageValue,
    },
  })
  console.log(article.value.item)
}

function reorderingImage(imageIndex, to) {
  Array.prototype.move = function (from, to) {
    this.splice(to, 0, this.splice(from, 1)[0])
  }
  if (to === 'go up') {
    article.value.item.move(imageIndex, imageIndex - 1)
  } else if (to === 'go down') {
    article.value.item.move(imageIndex, imageIndex + 1)
  }
}

function removeImage(imageIndex) {
  console.log(imageIndex)
  /* article.value.item.splice(imageIndex, 1) */
}
/**
 * validate input when event triggered
 * @param {string} siswa object key
 */
async function validateInput(field) {
  await articleSchema
    .validateAt(field, article.value)
    .then(() => {
      errorState.value[field].isError = false
    })
    .catch((err) => {
      errorState.value[field].isError = true
      errorState.value[field].message = err.message
    })
}

function addTextItem() {
  toggleModal('chooseItem')
  toggleModal('textEditor')
}
function addPictureAction() {
  toggleModal('chooseItem')
  console.log('addPictureAction run')
}
</script>
<template>
  <div class="content">
    <div class="content__inner">
      <ContentHead :items="[
  { title: 'artikel', path: '/artikel' },
  { title: 'tambah data artikel baru', path: '' },
]" />
      <div class="content__body">
        <div class="card artikel-add">
          <div class="card__head">
            <div class="card__title">
              <h3>Masukan Data Artikel</h3>
            </div>
            <div class="card__nav">
              <div class="icon__wrapper" @click="toggleModal('textEditor')">
                <CustomIcon :svg-icon="textAdd" />
              </div>
              <div class="icon__wrapper" @click="toggleModal('imageEditor')">
                <CustomIcon :svg-icon="imageAdd" />
              </div>
              <div class="icon__wrapper">
                <CustomIcon :svg-icon="disket" />
              </div>
            </div>
          </div>
          <div class="card__body">
            <form>
              <div>
                <CustomInput type="text" label="Judul" placeholder="Masukan judul artikel.."
                  v-model:input-value="article.nama" :error-state="errorState.nama"
                  @validate-input="validateInput('title')" />
              </div>
            </form>
            <ArticleAddPreviewList :items="article.item" @reordering-image="reorderingImage"
              @remove-image="removeImage" />
          </div>
        </div>
      </div>
    </div>
  </div>
  <teleport to="#modal">
    <CustomModalOverlay v-show="modal.textEditor" @close-modal="toggleModal('textEditor')">
      <div class="tinymce__wrapper">
        <form>
          <Editor :api-key="tinyMceOptions.apiKey" :init="tinyMceOptions.init" v-model="tinyMceOptions.contentValue" />
        </form>
      </div>
    </CustomModalOverlay>
    <CustomModalOverlay v-if="modal.imageEditor" @close-modal="toggleModal('imageEditor')">
      <AddNewImage @cancel-action="toggleModal('imageEditor')" @process-image="pushImageArticle" />
    </CustomModalOverlay>
  </teleport>
</template>
